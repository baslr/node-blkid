// Generated by CoffeeScript 1.9.2

/*

blkid -g && blkid

example

partition : '/dev/sdx',
uuid      : 'xxx',
uuid_sub  : 'xxx',
type      : 'fs-type',
partlabel : 'primary',
partuuid  : 'xxx'
 */

(function() {
  var blkids, exec;

  exec = require('child_process').exec;

  blkids = function(cb) {
    if (require('os').platform() !== 'linux') {
      return cb([]);
    }
    return exec('blkid -g && blkid', function(e, stdout, stderr) {
      var out;
      out = stdout.split('\n').slice(0, -1).map(function(line) {
        var part, regex, result;
        regex = new RegExp(/(\w+)\=\"([^\"]+)/g);
        part = {
          partition: line.match(/^(\S+)\:\ /)[1]
        };
        while (result = regex.exec(line)) {
          part[result[1].toLowerCase()] = result[2];
        }
        return part;
      }).sort(function(a, b) {
        return a.partition.localeCompare(b.partition);
      });
      return cb(out);
    });
  };

  module.exports.all = function(cb) {
    return blkids(cb);
  };

  module.exports.partitions = function(partitions, cb) {
    return blkids(function(parts) {
      var i, len, out, part;
      out = [];
      for (i = 0, len = parts.length; i < len; i++) {
        part = parts[i];
        if (-1 < partitions.indexOf(part.partition)) {
          out.push(part);
        }
      }
      return cb(out);
    });
  };

  module.exports.devices = function(cb) {
    return blkids(function(parts) {
      var i, len, out, part;
      out = {};
      for (i = 0, len = parts.length; i < len; i++) {
        part = parts[i];
        out[part.partition.split('/').pop().match(/^([a-z]+)/)[0]] = 1;
      }
      return cb(Object.keys(out).sort());
    });
  };

}).call(this);
